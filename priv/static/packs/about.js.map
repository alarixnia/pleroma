{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/standalone/public_timeline/index.js","webpack:///./app/javascript/mastodon/features/standalone/community_timeline/index.js","webpack:///./app/javascript/mastodon/features/standalone/hashtag_timeline/index.js","webpack:///./app/javascript/mastodon/containers/timeline_container.js","webpack:///./app/javascript/packs/about.js"],"names":["messages","Object","index_es","title","id","defaultMessage","public_timeline_PublicTimeline","es","handleHeaderClick","_this","column","scrollTop","setRef","c","handleLoadMore","maxId","props","dispatch","timelines","componentDidMount","this","disconnect","streaming","componentWillUnmount","render","intl","react_default","a","createElement","ref","label","formatMessage","jsx_default","column_header","icon","onClick","status_list_container","timelineId","onLoadMore","scrollKey","trackScroll","PureComponent","community_timeline_messages","community_timeline_CommunityTimeline","hashtag_timeline_HashtagTimeline","hashtag","_props","locales","localeData","timeline_container_messages","timeline_container_store","configureStore","initial_state","store","timeline_container_TimelineContainer","locale","showPublicTimeline","timeline","react","react_dom_default","createPortal","modal_container","document","getElementById","defaultProps","settings","known_fediverse","loaded","TimelineContainer","__webpack_require__","default","React","ReactDOM","mountNode","JSON","parse","getAttribute","_mastodon_common__WEBPACK_IMPORTED_MODULE_1__","_mastodon_load_polyfills__WEBPACK_IMPORTED_MODULE_0__","then","ready","catch","error","console"],"mappings":"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","file":"about.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../../ui/containers/status_list_container';\nimport { expandPublicTimeline } from '../../../actions/timelines';\nimport Column from '../../../components/column';\nimport ColumnHeader from '../../../components/column_header';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { connectPublicStream } from '../../../actions/streaming';\n\nconst messages = defineMessages({\n  title: { id: 'standalone.public_title', defaultMessage: 'A look inside...' },\n});\n\n@connect()\n@injectIntl\nexport default class PublicTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n\n    dispatch(expandPublicTimeline());\n    this.disconnect = dispatch(connectPublicStream());\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandPublicTimeline({ maxId }));\n  }\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <Column ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='globe'\n          title={intl.formatMessage(messages.title)}\n          onClick={this.handleHeaderClick}\n        />\n\n        <StatusListContainer\n          timelineId='public'\n          onLoadMore={this.handleLoadMore}\n          scrollKey='standalone_public_timeline'\n          trackScroll={false}\n        />\n      </Column>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../../ui/containers/status_list_container';\nimport { expandCommunityTimeline } from '../../../actions/timelines';\nimport Column from '../../../components/column';\nimport ColumnHeader from '../../../components/column_header';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { connectCommunityStream } from '../../../actions/streaming';\n\nconst messages = defineMessages({\n  title: { id: 'standalone.public_title', defaultMessage: 'A look inside...' },\n});\n\n@connect()\n@injectIntl\nexport default class CommunityTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n\n    dispatch(expandCommunityTimeline());\n    this.disconnect = dispatch(connectCommunityStream());\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandCommunityTimeline({ maxId }));\n  }\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <Column ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          title={intl.formatMessage(messages.title)}\n          onClick={this.handleHeaderClick}\n        />\n\n        <StatusListContainer\n          timelineId='community'\n          onLoadMore={this.handleLoadMore}\n          scrollKey='standalone_public_timeline'\n          trackScroll={false}\n        />\n      </Column>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../../ui/containers/status_list_container';\nimport { expandHashtagTimeline } from '../../../actions/timelines';\nimport Column from '../../../components/column';\nimport ColumnHeader from '../../../components/column_header';\nimport { connectHashtagStream } from '../../../actions/streaming';\n\n@connect()\nexport default class HashtagTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    hashtag: PropTypes.string.isRequired,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  componentDidMount () {\n    const { dispatch, hashtag } = this.props;\n\n    dispatch(expandHashtagTimeline(hashtag));\n    this.disconnect = dispatch(connectHashtagStream(hashtag));\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandHashtagTimeline(this.props.hashtag, { maxId }));\n  }\n\n  render () {\n    const { hashtag } = this.props;\n\n    return (\n      <Column ref={this.setRef}>\n        <ColumnHeader\n          icon='hashtag'\n          title={hashtag}\n          onClick={this.handleHeaderClick}\n        />\n\n        <StatusListContainer\n          trackScroll={false}\n          scrollKey='standalone_hashtag_timeline'\n          timelineId={`hashtag:${hashtag}`}\n          onLoadMore={this.handleLoadMore}\n        />\n      </Column>\n    );\n  }\n\n}\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport configureStore from '../store/configureStore';\nimport { hydrateStore } from '../actions/store';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport { getLocale } from '../locales';\nimport PublicTimeline from '../features/standalone/public_timeline';\nimport CommunityTimeline from '../features/standalone/community_timeline';\nimport HashtagTimeline from '../features/standalone/hashtag_timeline';\nimport ModalContainer from '../features/ui/containers/modal_container';\nimport initialState from '../initial_state';\n\nconst { localeData, messages } = getLocale();\naddLocaleData(localeData);\n\nconst store = configureStore();\n\nif (initialState) {\n  store.dispatch(hydrateStore(initialState));\n}\n\nexport default class TimelineContainer extends React.PureComponent {\n\n  static propTypes = {\n    locale: PropTypes.string.isRequired,\n    hashtag: PropTypes.string,\n    showPublicTimeline: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    showPublicTimeline: initialState.settings.known_fediverse,\n  };\n\n  render () {\n    const { locale, hashtag, showPublicTimeline } = this.props;\n\n    let timeline;\n\n    if (hashtag) {\n      timeline = <HashtagTimeline hashtag={hashtag} />;\n    } else if (showPublicTimeline) {\n      timeline = <PublicTimeline />;\n    } else {\n      timeline = <CommunityTimeline />;\n    }\n\n    return (\n      <IntlProvider locale={locale} messages={messages}>\n        <Provider store={store}>\n          <Fragment>\n            {timeline}\n            {ReactDOM.createPortal(\n              <ModalContainer />,\n              document.getElementById('modal-container'),\n            )}\n          </Fragment>\n        </Provider>\n      </IntlProvider>\n    );\n  }\n\n}\n","import loadPolyfills from '../mastodon/load_polyfills';\nimport { start } from '../mastodon/common';\n\nstart();\n\nfunction loaded() {\n  const TimelineContainer = require('../mastodon/containers/timeline_container').default;\n  const React             = require('react');\n  const ReactDOM          = require('react-dom');\n  const mountNode         = document.getElementById('mastodon-timeline');\n\n  if (mountNode !== null) {\n    const props = JSON.parse(mountNode.getAttribute('data-props'));\n    ReactDOM.render(<TimelineContainer {...props} />, mountNode);\n  }\n}\n\nfunction main() {\n  const ready = require('../mastodon/ready').default;\n  ready(loaded);\n}\n\nloadPolyfills().then(main).catch(error => {\n  console.error(error);\n});\n"],"sourceRoot":""}