{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/hashtag_timeline/index.js"],"names":["HashtagTimeline","Object","react_redux__WEBPACK_IMPORTED_MODULE_5__","state","props","hasUnread","getIn","params","id","handlePin","_this$props","_this","columnId","dispatch","_actions_columns__WEBPACK_IMPORTED_MODULE_10__","handleMove","dir","_this$props2","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","maxId","_actions_timelines__WEBPACK_IMPORTED_MODULE_9__","_subscribe","this","disconnect","_actions_streaming__WEBPACK_IMPORTED_MODULE_12__","_unsubscribe","componentDidMount","componentWillReceiveProps","nextProps","componentWillUnmount","render","_props","shouldUpdateScroll","multiColumn","pinned","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","_components_column__WEBPACK_IMPORTED_MODULE_7__","ref","label","babel_runtime_helpers_jsx__WEBPACK_IMPORTED_MODULE_0___default","_components_column_header__WEBPACK_IMPORTED_MODULE_8__","icon","active","title","onPin","onMove","onClick","showBackButton","_ui_containers_status_list_container__WEBPACK_IMPORTED_MODULE_6__","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","react_intl__WEBPACK_IMPORTED_MODULE_11__","defaultMessage","PureComponent"],"mappings":"8RAgBqBA,EADpBC,OAAAC,EAAA,QAAAD,CAJuB,SAACE,EAAOC,GAAR,OACtBC,UAAWF,EAAMG,OAAO,YAAD,WAAyBF,EAAMG,OAAOC,GAAM,WAAa,kLAehFC,UAAY,WAAM,IAAAC,EACeC,EAAKP,MAA5BQ,EADQF,EACRE,SAAUC,EADFH,EACEG,SAGhBA,EADED,EACOX,OAAAa,EAAA,EAAAb,CAAaW,GAEbX,OAAAa,EAAA,EAAAb,CAAU,WAAaO,GAAIG,EAAKP,MAAMG,OAAOC,SAI1DO,WAAa,SAACC,GAAQ,IAAAC,EACWN,EAAKP,MAA5BQ,EADYK,EACZL,UACRC,EAFoBI,EACFJ,UACTZ,OAAAa,EAAA,EAAAb,CAAWW,EAAUI,OAGhCE,kBAAoB,WAClBP,EAAKQ,OAAOC,eAkCdC,OAAS,SAAAC,GACPX,EAAKQ,OAASG,KAGhBC,eAAiB,SAAAC,GACfb,EAAKP,MAAMS,SAASZ,OAAAwB,EAAA,EAAAxB,CAAsBU,EAAKP,MAAMG,OAAOC,IAAMgB,qDApCpEE,oBAAYb,EAAUL,GACpBmB,KAAKC,WAAaf,EAASZ,OAAA4B,EAAA,EAAA5B,CAAqBO,iBAGlDsB,wBACMH,KAAKC,aACPD,KAAKC,aACLD,KAAKC,WAAa,mBAItBG,6BAAqB,IACXlB,EAAac,KAAKvB,MAAlBS,SACAL,EAAOmB,KAAKvB,MAAMG,OAAlBC,GAERK,EAASZ,OAAAwB,EAAA,EAAAxB,CAAsBO,IAC/BmB,KAAKD,WAAWb,EAAUL,gBAG5BwB,mCAA2BC,GACrBA,EAAU1B,OAAOC,KAAOmB,KAAKvB,MAAMG,OAAOC,KAC5CmB,KAAKvB,MAAMS,SAASZ,OAAAwB,EAAA,EAAAxB,CAAsBgC,EAAU1B,OAAOC,KAC3DmB,KAAKG,eACLH,KAAKD,WAAWC,KAAKvB,MAAMS,SAAUoB,EAAU1B,OAAOC,kBAI1D0B,gCACEP,KAAKG,4BAWPK,kBAAU,IAAAC,EACyDT,KAAKvB,MAA9DiC,EADAD,EACAC,mBAAoBhC,EADpB+B,EACoB/B,UAAWO,EAD/BwB,EAC+BxB,SAAU0B,EADzCF,EACyCE,YACzC9B,EAAOmB,KAAKvB,MAAMG,OAAlBC,GACF+B,IAAW3B,EAEjB,OACE4B,EAAAC,EAAAC,cAACC,EAAA,GAAOC,IAAKjB,KAAKN,OAAQwB,MAAA,IAAWrC,GAArCsC,IACGC,EAAA,GADHC,KAES,UAFTC,OAGY5C,EAHZ6C,MAIW1C,EAJX2C,MAKWxB,KAAKlB,UALhB2C,OAMYzB,KAAKZ,WANjBsC,QAOa1B,KAAKT,kBAPlBqB,OAQYA,EARZD,YASiBA,EATjBgB,gBAAA,IAAAR,IAaGS,EAAA,GAbHC,aAckBjB,EAdlBkB,UAAA,oBAemC7C,EAfnC8C,WAAA,WAgB2BlD,EAhB3BmD,WAiBgBhC,KAAKJ,eAjBrBqC,aAAAd,IAkBmBe,EAAA,GAlBnBrD,GAkBuC,uBAlBvCsD,eAkB6E,0CAlB7EzB,mBAmBwBA,SA9FeG,EAAAC,EAAMsB","file":"features/hashtag_timeline.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandHashtagTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { FormattedMessage } from 'react-intl';\nimport { connectHashtagStream } from '../../actions/streaming';\n\nconst mapStateToProps = (state, props) => ({\n  hasUnread: state.getIn(['timelines', `hashtag:${props.params.id}`, 'unread']) > 0,\n});\n\n@connect(mapStateToProps)\nexport default class HashtagTimeline extends React.PureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HASHTAG', { id: this.props.params.id }));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  _subscribe (dispatch, id) {\n    this.disconnect = dispatch(connectHashtagStream(id));\n  }\n\n  _unsubscribe () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(expandHashtagTimeline(id));\n    this._subscribe(dispatch, id);\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.params.id !== this.props.params.id) {\n      this.props.dispatch(expandHashtagTimeline(nextProps.params.id));\n      this._unsubscribe();\n      this._subscribe(this.props.dispatch, nextProps.params.id);\n    }\n  }\n\n  componentWillUnmount () {\n    this._unsubscribe();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandHashtagTimeline(this.props.params.id, { maxId }));\n  }\n\n  render () {\n    const { shouldUpdateScroll, hasUnread, columnId, multiColumn } = this.props;\n    const { id } = this.props.params;\n    const pinned = !!columnId;\n\n    return (\n      <Column ref={this.setRef} label={`#${id}`}>\n        <ColumnHeader\n          icon='hashtag'\n          active={hasUnread}\n          title={id}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          showBackButton\n        />\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`hashtag_timeline-${columnId}`}\n          timelineId={`hashtag:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.hashtag' defaultMessage='There is nothing in this hashtag yet.' />}\n          shouldUpdateScroll={shouldUpdateScroll}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}