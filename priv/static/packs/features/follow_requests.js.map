{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/follow_requests/components/account_authorize.js","webpack:///./app/javascript/mastodon/features/follow_requests/containers/account_authorize_container.js","webpack:///./app/javascript/mastodon/features/follow_requests/index.js"],"names":["messages","Object","index_es","authorize","id","defaultMessage","reject","account_authorize_AccountAuthorize","render","_props","this","props","intl","account","onAuthorize","onReject","content","__html","get","jsx_default","className","permalink","href","to","avatar","size","display_name","dangerouslySetInnerHTML","icon_button","title","formatMessage","icon","onClick","react_immutable_pure_component_es","propTypes","ImmutablePropTypes_default","a","map","isRequired","prop_types_default","func","object","account_authorize_container","es","getAccount","selectors","state","dispatch","_ref","accounts","follow_requests_messages","heading","follow_requests_FollowRequests","accountIds","getIn","handleLoadMore","debounce_default","_this","leading","componentWillMount","shouldUpdateScroll","column","loading_indicator","emptyMessage","column_back_button_slim","scrollable_list","scrollKey","onLoadMore","params","list"],"mappings":"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","file":"features/follow_requests.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Permalink from '../../../components/permalink';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport IconButton from '../../../components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\n@injectIntl\nexport default class AccountAuthorize extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, account, onAuthorize, onReject } = this.props;\n    const content = { __html: account.get('note_emojified') };\n\n    return (\n      <div className='account-authorize__wrapper'>\n        <div className='account-authorize'>\n          <Permalink href={account.get('url')} to={`/accounts/${account.get('id')}`} className='detailed-status__display-name'>\n            <div className='account-authorize__avatar'><Avatar account={account} size={48} /></div>\n            <DisplayName account={account} />\n          </Permalink>\n\n          <div className='account__header__content' dangerouslySetInnerHTML={content} />\n        </div>\n\n        <div className='account--panel'>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} /></div>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} /></div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from '../../../selectors';\nimport AccountAuthorize from '../components/account_authorize';\nimport { authorizeFollowRequest, rejectFollowRequest } from '../../../actions/accounts';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AccountAuthorize);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport AccountAuthorizeContainer from './containers/account_authorize_container';\nimport { fetchFollowRequests, expandFollowRequests } from '../../actions/accounts';\nimport ScrollableList from '../../components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.follow_requests', defaultMessage: 'Follow requests' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'follow_requests', 'items']),\n});\n\n@connect(mapStateToProps)\n@injectIntl\nexport default class FollowRequests extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    accountIds: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchFollowRequests());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowRequests());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, shouldUpdateScroll, accountIds } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.follow_requests' defaultMessage=\"You don't have any follow requests yet. When you receive one, it will show up here.\" />;\n\n    return (\n      <Column icon='users' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='follow_requests'\n          onLoadMore={this.handleLoadMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n        >\n          {accountIds.map(id =>\n            <AccountAuthorizeContainer key={id} id={id} />\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}