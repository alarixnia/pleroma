{"version":3,"sources":["webpack:///./app/javascript/mastodon/components/domain.js","webpack:///./app/javascript/mastodon/containers/domain_container.js","webpack:///./app/javascript/mastodon/features/domain_blocks/index.js","webpack:///./node_modules/babel-runtime/helpers/objectDestructuringEmpty.js"],"names":["messages","Object","index_es","unblockDomain","id","defaultMessage","domain_Account","handleDomainUnblock","_this","props","onUnblockDomain","domain","render","_props","this","intl","jsx_default","className","icon_button","active","icon","title","formatMessage","onClick","react_immutable_pure_component_es","propTypes","prop_types_default","a","string","func","isRequired","object","domain_container_messages","blockDomainConfirm","domain_container","es","state","_ref","objectDestructuringEmpty_default","dispatch","_ref2","onBlockDomain","modal","message","values","confirm","onConfirm","domain_blocks","domain_blocks_messages","heading","domain_blocks_Blocks","domains","getIn","handleLoadMore","debounce_default","leading","componentWillMount","shouldUpdateScroll","column","loading_indicator","emptyMessage","column_back_button_slim","scrollable_list","scrollKey","onLoadMore","map","params","ImmutablePropTypes_default","orderedSet","exports","__esModule","default","obj","TypeError"],"mappings":"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","file":"features/domain_blocks.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from './icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unhide {domain}' },\n});\n\n@injectIntl\nexport default class Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    domain: PropTypes.string,\n    onUnblockDomain: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleDomainUnblock = () => {\n    this.props.onUnblockDomain(this.props.domain);\n  }\n\n  render () {\n    const { domain, intl } = this.props;\n\n    return (\n      <div className='domain'>\n        <div className='domain__wrapper'>\n          <span className='domain__domain-name'>\n            <strong>{domain}</strong>\n          </span>\n\n          <div className='domain__buttons'>\n            <IconButton active icon='unlock-alt' title={intl.formatMessage(messages.unblockDomain, { domain })} onClick={this.handleDomainUnblock} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Domain from '../components/domain';\nimport { openModal } from '../actions/modal';\n\nconst messages = defineMessages({\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Hide entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const mapStateToProps = (state, { }) => ({\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onBlockDomain (domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport DomainContainer from '../../containers/domain_container';\nimport { fetchDomainBlocks, expandDomainBlocks } from '../../actions/domain_blocks';\nimport ScrollableList from '../../components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.domain_blocks', defaultMessage: 'Hidden domains' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unhide {domain}' },\n});\n\nconst mapStateToProps = state => ({\n  domains: state.getIn(['domain_lists', 'blocks', 'items']),\n});\n\n@connect(mapStateToProps)\n@injectIntl\nexport default class Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    domains: ImmutablePropTypes.orderedSet,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchDomainBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandDomainBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, domains, shouldUpdateScroll } = this.props;\n\n    if (!domains) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.domain_blocks' defaultMessage='There are no hidden domains yet.' />;\n\n    return (\n      <Column icon='minus-circle' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='domain_blocks'\n          onLoadMore={this.handleLoadMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n        >\n          {domains.map(domain =>\n            <DomainContainer key={domain} domain={domain} />\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};"],"sourceRoot":""}